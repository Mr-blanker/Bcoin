/*!
 * PullScroll -- 下拉刷新和上拉、滚动、点击加载js框架
 * version 1.0.1
 * author: 童 < 501468940@qq.com >
 */
(function (t) {
  "use strict";
  var e = function t(e, o) {
    if (!(this instanceof t)) return new t(e, o);
    this.version = "1.0.1";
    this.options = this.merge({
      scrollBar: "document",
      timeout: 10,
      hardwareClass: "animate-hardware",
      loadingTip: "正在加载...",
      monitorScrollBar: true,
      loadingHtml: '<div class="w"><p class="c"></p><p class="t">正在加载</p></div>',
      refreshHtml: '<div class="w"><p class="c"></p><p class="t">下拉刷新</p></div>',
      endScrollHtml: '<div class="w"><p class="t">没有更多了</p></div>',
      clickHtml: "查看更多",
      clickClass: "more",
      autoLoading: true
    }, o || {});
    if (this.options.scrollBar === "document" || this.options.scrollBar === "body") {
      this.isBodyScrollBar = true;
      this.scrollBarDom = document.documentElement
    } else {
      this.isBodyScrollBar = false;
      this.scrollBarDom = document.getElementById(this.options.scrollBar);
      this.scrollBarDom.style.webkitOverflowScrolling = 'touch';
      this.scrollBarDom.style.overflowY = 'auto';
    }
    this.scrollDom = document.getElementById(e);
    if (!this.scrollDom) return this;
    this.init()
  };
  e.prototype.init = function () {
    var t = this.options.refresh;
    if (typeof this.options.refresh === "function") t = {callback: this.options.refresh};
    this.refresh = this.merge({offset: 60}, t);
    var e = this.options.loading;
    if (typeof this.options.loading === "function") e = {callback: this.options.loading};
    this.loading = this.merge({offset: 60}, e);
    this.initDownScroll()
  };
  e.prototype.merge = function (t, e) {
    for (var o in e) {
      t[o] = e[o]
    }
    return t
  };
  e.prototype.setRefreshOption = function (t) {
    if (t) this.options.refresh = this.merge(this.options.refresh, t)
  };
  e.prototype.setLoadingOption = function (t) {
    if (t) this.options.loading = this.merge(this.options.loading, t)
  };
  e.prototype.initDownScroll = function () {
    var a = this;
    a.pullHeight = 0;
    a.downHeight = 0;
    a.touchStartEvent = function (t) {
      if (a.onCallback) return;
      a.refreshDivDom.classList.remove("animate");
      a.loadingDivDom.classList.remove("animate");
      a.startPoint = a.getPoint(t);
      a.lastPoint = a.startPoint
    };
    a.touchMoveEvent = function (t) {
      if (a.onCallback && t.cancelable && !t.defaultPrevented) return t.preventDefault();
      var e = a.getScrollTop();
      var o = a.getPoint(t);
      var i = o.y - a.startPoint.y > 0 ? "down" : "up";
      if (i === "down") {
        if (e <= 0) {
          if (t.cancelable && !t.defaultPrevented) t.preventDefault();
          var s = o.y - a.lastPoint.y;
          if (s < 0 && a.downHeight <= 0) return;
          if (s > 0 && a.downHeight > a.refresh.offset) s = s * .2;
          a.downHeight += s;
          if (a.downHeight < 0) a.downHeight = 0;
          a.refreshDivDom.style.height = a.downHeight + "px";
          var r = "下拉刷新";
          if (a.downHeight > a.refresh.offset) r = "释放更新";
          a.refreshTipDom.innerHTML = r;
          var n = a.downHeight / a.refresh.offset;
          a.refresh.onMoving && a.refresh.onMoving(a, n, a.downHeight);
          var l = n * 360;
          a.refreshProgress.style.transform = "rotate(" + l + "deg)";
          a.refreshProgress.style.webkitTransform = "rotate(" + l + "deg)"
        }
      } else {
        if (!a.isEndScroll && a.isScrollToBottom() && a.options.autoLoading) a.triggerLoading()
      }
      a.lastPoint = o
    };
    a.touchEndEvent = function () {
      if (a.onCallback) return;
      if (a.downHeight > 0) {
        a.refreshDivDom.classList.add("animate");
        if (a.downHeight > a.refresh.offset) return a.triggerRefresh();
        a.downHeight = 0;
        return a.refreshDivDom.style.height = 0 + "px"
      }
      if (a.pullHeight < 0 && a.options.autoLoading) {
        var t = a.loading.offset * -1;
        a.pullHeight = a.pullHeight > t ? 0 : t;
        a.scrollDom.classList.add("animate");
        a.loadingProgress.classList.add("c-rotate");
        a.scrollDom.style.transform = "translate3d(0px, " + a.pullHeight + "px, 0px)";
        a.loadingDivDom.classList.add("animate");
        if (a.pullHeight === 0) return;
        a.triggerLoading()
      }
    };
    a.scrollDom.addEventListener("touchstart", a.touchStartEvent);
    a.scrollDom.addEventListener("touchmove", a.touchMoveEvent);
    a.scrollDom.addEventListener("touchend", a.touchEndEvent);
    a.scrollDom.addEventListener("mousedown", a.touchStartEvent);
    a.scrollDom.addEventListener("mouseup", a.touchEndEvent);
    a.scrollDom.addEventListener("mouseleave", a.touchEndEvent);
    a.scrollEvent = function () {
      if (a.onCallback || a.isEndScroll || !a.options.autoLoading) return;
      if (!a.options.useElastic && a.isScrollToBottom()) {
        a.triggerLoading()
      }
    };
    if (this.options.monitorScrollBar) {
      if (this.isBodyScrollBar) {
        document.addEventListener("scroll", a.scrollEvent)
      } else {
        this.scrollBarDom.addEventListener("scroll", a.scrollEvent)
      }
    }
    this.refreshDivDom = document.createElement("div");
    this.refreshDivDom.className = "indicator refresh";
    this.refreshDivDom.innerHTML = this.options.refreshHtml;
    this.refreshTipDom = this.refreshDivDom.getElementsByClassName("t")[0];
    this.refreshProgress = this.refreshDivDom.getElementsByClassName("c")[0];
    this.scrollDom.insertBefore(this.refreshDivDom, this.scrollDom.firstChild);
    this.initLoading()
  };
  e.prototype.initLoading = function () {
    this.loadingDivDom = document.createElement("div");
    this.loadingDivDom.className = "indicator loading";
    this.loadingDivDom.innerHTML = this.options.loadingHtml;
    this.loadingTipDom = this.loadingDivDom.getElementsByClassName("t")[0];
    this.loadingProgress = this.loadingDivDom.getElementsByClassName("c")[0];
    this.scrollDom.appendChild(this.loadingDivDom);
    this._CreateMoreClick()
  };
  e.prototype._CreateMoreClick = function () {
    var t = this;
    this.clickDom = document.createElement("div");
    this.clickDom.className = "indicator loading more";
    this.clickDom.innerHTML = '<div class="w"><p class="t">查看更多</p></div>';
    this.scrollDom.appendChild(this.clickDom);
    this.clickDom.addEventListener("click", function () {
      t.triggerLoading()
    });
    if (this.options.autoLoading) {
      this.clickDom.style.display = "none"
    } else {
      this.loadingDivDom.style.display = "none"
    }
  };
  e.prototype.triggerRefresh = function () {
    var t = this;
    if (this.onCallback) return;
    this.onCallback = true;
    this.downHeight = this.refresh.offset;
    this.refreshDivDom.style.height = this.downHeight + "px";
    this.refresh.callback && this.refresh.callback(this);
    this.refreshDivDom.classList.add("animate");
    this.refreshProgress.classList.add("c-rotate");
    this.loadingDivDom.style.display = "none";
    this.clickDom.style.display = "none";
    this.timer = setTimeout(function () {
      if (t.onCallback) t.finish()
    }, this.options.timeout * 1e3)
  };
  e.prototype.triggerLoading = function () {
    var t = this;
    if (this.onCallback) return;
    this.onCallback = true;
    this.loading.callback && this.loading.callback(this);
    // this.loadingProgress.classList.add("c-rotate");
    this.clickDom.style.display = "none";
    this.loadingDivDom.style.display = "block";
    this.timer = setTimeout(function () {
      if (t.onCallback) t.finish()
    }, this.options.timeout * 1e3)
  };
  e.prototype.resetRefresh = function () {
    this.downHeight = 0;
    this.refreshDivDom.style.height = this.downHeight;
    this.refreshProgress.classList.remove("c-rotate");
    this.resetLoading()
  };
  e.prototype.resetLoading = function () {
    this.loadingDivDom.innerHTML = this.options[(this.isEndScroll ? 'endScrollHtml' : 'loadingHtml')];
    ;this.loadingTipDom = this.loadingDivDom.getElementsByClassName("t")[0];
    this.loadingProgress = this.loadingDivDom.getElementsByClassName("c")[0];
    if (this.options.autoLoading) {
      this.loadingDivDom.style.display = "block";
      this.clickDom.style.display = "none"
    } else {
      this.clickDom.style.display = "block"
    }
  };
  e.prototype.os = function () {
    var t = window.navigator.userAgent;
    var e = !!t.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
    var o = t.indexOf("Android") > -1 || t.indexOf("Adr") > -1;
    return {ios: e, pc: !e && !o, android: o}
  }();
  e.prototype.getPoint = function (t) {
    return {x: t.touches ? t.touches[0].pageX : t.clientX, y: t.touches ? t.touches[0].pageY : t.clientY}
  };
  e.prototype.getClientHeight = function () {
    return this.scrollBarDom.clientHeight
  };
  e.prototype.setScrollTop = function (t) {
    if (this.isBodyScrollBar) {
      document.body.scrollTop += t;
      document.documentElement.scrollTop += t
    } else {
      this.scrollBarDom.scrollTop += t
    }
  };
  e.prototype.getScrollTop = function () {
    if (this.isBodyScrollBar) {
      return document.documentElement.scrollTop || document.body.scrollTop
    }
    return this.scrollBarDom.scrollTop
  };
  e.prototype.getScrollHeight = function () {
    return this.scrollBarDom.scrollHeight
  };
  e.prototype.isScrollToBottom = function () {
    var t = this.getScrollHeight() - this.getClientHeight() - this.getScrollTop();
    return this.options.useElastic ? t <= 0 : t <= this.loading.offset
  };
  e.prototype.finish = function (t) {
    this.onCallback = false;
    this.isEndScroll = t || false;
    if (this.isEndScroll) {
      this.loadingDivDom.innerHTML = this.options.endScrollHtml
    }
    if (this.downHeight > 0) this.resetRefresh();
    if (this.pullHeight < 0) this.resetLoading();
    clearTimeout(this.timer)
  };
  e.prototype.destroy = function () {
    var t = this;
    t.scrollDom.removeEventListener("touchstart", t.touchstartEvent);
    t.scrollDom.removeEventListener("touchmove", t.touchmoveEvent);
    t.scrollDom.removeEventListener("touchend", t.touchendEvent);
    t.scrollDom.removeEventListener("touchcancel", t.touchendEvent);
    t.scrollDom.removeEventListener("mousedown", t.touchstartEvent);
    t.scrollDom.removeEventListener("mousemove", t.touchmoveEvent);
    t.scrollDom.removeEventListener("mouseup", t.touchendEvent);
    t.scrollDom.removeEventListener("mouseleave", t.touchendEvent);
    if (t.isBodyScrollBar) {
      document.addEventListener("scroll", t.scrollEvent)
    } else {
      this.scrollBarDom.addEventListener("scroll", t.scrollEvent)
    }
  };
  var o = document.createElement("style");
  o.setAttribute("type", "text/css");
  o.innerHTML = ".pullScroll .animate{transition:height 300ms;}.pullScroll .indicator{width:100%;background:inherit;height:0;overflow:hidden;position:relative;font-size:16px;}.pullScroll .indicator.loading{height:60px;line-height:60px;}.pullScroll .indicator .w{width:100%;text-align:center;}.pullScroll .indicator.refresh .w{position:absolute;left:0;bottom:0;min-height:30px;padding:10px 0;}.pullScroll .c{display:inline-block;width:.875em;height:.875em;border-radius:50%;border:1px solid #444;margin-right:8px;border-bottom-color:transparent;vertical-align:middle;}.pullScroll .c-rotate{-webkit-animation:rotate .6s linear infinite;animation:rotate .6s linear infinite;}.pullScroll .t{display:inline-block;font-size:.875em;color:#444;vertical-align:middle;}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";
  document.head.appendChild(o);
  if (typeof require === "function" && typeof module === "object" && module && typeof exports === "object" && exports) module.exports = e; else if (typeof define === "function" && define["amd"]) define(function () {
    return e
  }); else t["PullScroll"] = t["PullScroll"] || e
})(window || this);
